import matplotlib.pyplot as plt
import numpy as np
from random import randint

#CHANGE THESE VARIABLES AS YOU SEE FIT
numOfObjects = 50                       #number of objects
timeStep = 200                          #time intervals used during the simulation (increase for quicker processing of larger time periods)
numOfSteps = 10000                      #number of steps in the simulation
gravConstant =  6.674 * 10**-11         #pretty self-explanatory
lowMass = 100000                        #the lowest mass the program will generate. Make sure it can't be zero.
upMass = 1000000                        #the highest mass the program will generate
lowPos = 0                              #the lowest position an object will start at
upPos = 5000                            #the greatest position an object will start at
tol = 5                                 #the minimum distance objects will enact gravity on each other at, to avoid infinite forces arising from Newtonian gravity

#DON'T CHANGE THESE VARIABLES
timeArray = np.arange(0, (numOfSteps + 1) * timeStep, timeStep)     #this makes the time array that is used when making the final graph.
globalSteps = 0                                                     #this is a running counter of how many steps the simulation has completed (more for debugging/optimising)
objList = []                                                        #the list where all the current objects will go

def lastInList(objx, propertyx):                                    #simple function to find last item in list (tailored for this program)
    return objx[propertyx][len(objx[propertyx]) - 1]

class InteractiveObject:                                            #where the magic happens. this is how all the objects are defined.
    def __init__(self, mass, velocity, position):                    #the initial setup of all objects in the simulation
        self.accel = 0                                              #this is the object's current acceleration
        self.distances = []                                         #this is the list of distances from this object to every other object. this is constantly changing at each step
        self.mass = mass
        self.netForce = 0                                           #sum of all forces acting on the object.
        self.velocity = velocity
        self.positions = [position]                                 #this will be where every position the object has had will go. every position needs to be stored for graphing later on
        for i in xrange(numOfObjects):
            self.distances.append(0)                                #just making an empty list for the distances
        objList.append(self)                                        
        
    def asIndex(self):                                              #returns the object's index within the 'objList'
        return objList.index(self)
    
    def lastPos(self):                                              #returns the object's current position. useful for figuring out its next position.
        return self.positions[len(self.positions) - 1]
            
    def calcDistances(self):                                        #figuring out all the distances between an object and all other objects (actually includes itself in the list but shh)
        for self2 in objList:
            diff = self2.lastPos() - self.lastPos()
            self.distances[self2.asIndex()] = diff  
                
    def calcNetForce(self):
        f = 0                                                                               #f is force
        for self2 in objList:   
            if self.distances[self2.asIndex()] < tol:
                continue
            else:
                f += self.mass * self2.mass * gravConstant / self.distances[self2.asIndex()]    #else, use gravity equation to figure out force
        self.netForce = f
        
    def calcAccel(self):                                                                        #use net force to calculate acceleration using a = F/m.
        self.calcNetForce()                                         
        self.accel = self.netForce / self.mass
        
    def calcNextPos(self):                                                                      #use acceleration, initial velocity and time to calculate next position. 
        self.calcAccel()    
        s = self.lastPos() + self.velocity * timeStep + 0.5 * self.accel * timeStep*2          
        self.positions.append(s)                 
        self.velocity += self.accel * timeStep                                               

for obj in xrange(numOfObjects):                        #this creates all objects
    m = randint(lowMass, upMass)
    p = randint(lowPos, upPos)
    obj = InteractiveObject(mass = m, velocity = 0, position = p)
    
while numOfSteps > 0:                                   #not sure why I made this a while loop instead of a for loop but it doesn't really matter
    numOfObjects = len(objList)                         #calculating this for the rest of the while loop up until the collision detection at the end
    globalSteps += 1
    
    print globalSteps

    for obj in objList:
        obj.calcDistances()
        
    for obj in objList:
        obj.calcNextPos()
                
    numOfSteps -= 1
                
for obj in objList:                                 #magic graph plotting occurs here.
    t = timeArray
    pos = obj.positions
    plt.plot(t, pos)

    
plt.xlabel('Time (s)')                          
plt.ylabel('Position (m)')
plt.show()
