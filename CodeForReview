import matplotlib.pyplot as plt
import numpy as np
from random import randint
from cmath import sqrt, cos, sin, pi
from numpy import arctan
from mpl_toolkits.mplot3d import Axes3D

#CHANGE THESE VARIABLES AS YOU SEE FIT
numOfObjects = 10                       #number of objects
timeStep = 200                          #time intervals used during the simulation (increase for quicker processing of larger time periods)
numOfSteps = 50                         #number of steps in the simulation
gravConstant =  6.674 * 10**-11         #pretty self-explanatory
lowMass = 100000                        #the lowest mass the program will generate. Make sure it can't be zero.
upMass = 1000000                        #the highest mass the program will generate
lowPos = 0                              #the lowest position an object will start at
upPos = 500                             #the greatest position an object will start at
tol = 7                                 #how close objects are allowed before they merge. Increasing this will stop objects from passing through each other without colliding, but will create an uglier graph

#DON'T CHANGE THESE VARIABLES
timeArray = np.arange(0, (numOfSteps + 1) * timeStep, timeStep)     #this makes the time array that is used when making the final graph.
globalSteps = 0                                                     #this is a running counter of how many steps the simulation has completed (more for debugging/optimising)
objList = []                                                        #the list where all the current objects will go
deadObjList = []                                                    #the list where all the 'dead' objects will go (those that have collided and merged)

def lastInList(objx, propertyx):                                    #simple function to find last item in list (tailored for this program)
    return objx[propertyx][len(objx[propertyx]) - 1]

class InteractiveObject:                                            #where the magic happens. this is how all the objects are defined.
    def __init__(self, mass, velocity, pos1,pos2, initStep):         #the initial setup of all objects in the simulation
        self.accel = []
        self.distances = []                                         #this is the list of distances from this object to every other object. this is constantly changing at each step
        self.mass = mass
        self.netForce = []                                           #sum of all forces acting on the object.
        self.velocity = velocity
        self.positions = [[pos1,pos2]]                                 #this will be where every position the object has had will go. every position needs to be stored for graphing later on
        self.steps = 0                                              #a running counter of how long this object has been around for. required for graphing
        self.initStep = initStep                                    #retains when the object first came into being. important for objects formed after collisions. again this is for graphing
        self.deadStep = 0                                           #when object 'died'
        for i in xrange(numOfObjects):
            self.distances.append([0,0])                                #just making an empty list for the distances
        objList.append(self)                                        
        
    def asIndex(self):                                              #returns the object's index within the 'objList'
        return objList.index(self)
    
    def lastPos(self):                                              #returns the object's current position. useful for figuring out its next position.
        return self.positions[len(self.positions) - 1]
    
    def calcDistances(self):                                        #figuring out all the distances between an object and all other objects (actually includes itself in the list but shh)
        for self2 in objList:
            x = self2.lastPos()[0] - self.lastPos()[0]
            y = self2.lastPos()[1] - self.lastPos()[1]
            distance_magnitude = abs(sqrt(x**2 + y**2))
            self.distances[self2.asIndex()][0] = distance_magnitude
    
    def calcAngles(self):
        for self2 in objList:
            x = self2.lastPos()[0] - self.lastPos()[0]
            y = self2.lastPos()[1] - self.lastPos()[1]
            if x != 0:
                angle = arctan(y/x)
            else:
                angle = pi/2
            self.distances[self2.asIndex()][1] = angle
            #now we have arrays in the distances array. [magnitude, angle] for distances.
                
    def calcNetForce(self):
        sum_forces = [0,0]                                                                                  #f is force
        for self2 in objList:
            if self == self2:
                continue 
            x = self2.lastPos()[0] - self.lastPos()[0]
            y = self2.lastPos()[1] - self.lastPos()[1]
            distance_magnitude = abs(sqrt(x**2 + y**2))
            if distance_magnitude < tol:                                     #if the objects are too close together
                continue
            else:
                force_magnitude = self.mass * self2.mass * gravConstant / distance_magnitude
                x = force_magnitude * cos(self.distances[self2.asIndex()][1])
                y = force_magnitude * sin(self.distances[self2.asIndex()][1])
                sum_forces += [x,y]
        self.netForce = sum_forces
        
    def calcAccel(self):
        x = self.netForce[0] / self.mass
        y = self.netForce[1] / self.mass                                                                        #use net force to calculate acceleration using a = F/m.                                        
        self.accel = [x,y]
        
    def calcNextPos(self):
        pos_x = self.lastPos()[0] + self.velocity[0] * timeStep + 0.5 * self.accel[0] * timeStep*2
        pos_y = self.lastPos()[1] + self.velocity[1] * timeStep + 0.5 * self.accel[1] * timeStep*2                                                           
        self.positions.append([pos_x,pos_y])      
        vel_x = self.accel[0] * timeStep
        vel_y = self.accel[1] * timeStep           
        self.velocity += [vel_x,vel_y]                                              #I'm not sure if I ever change the velocity even though it really should but tests seem to indicate that everything breaks. might have to update this.
             
    def combineObjects(self, self2):                                                                #where objects get combined and a new object is formed
        totalMass = self.mass + self2.mass
        momentum_x = self.mass * self.velocity[0] + self2.mass * self2.velocity[0]
        momentum_y = self.mass * self.velocity[1] + self2.mass * self2.velocity[1]
        vel_x = momentum_x / totalMass
        vel_y = momentum_y / totalMass
        pos_x = (self.lastpos()[0] + self2.lastPos()[0]) / 2
        pos_y = (self.lastpos()[1] + self2.lastPos()[1]) / 2
        newObj = InteractiveObject(mass = totalMass,velocity = [vel_x,vel_y], position = [pos_x,pos_y], initStep = globalSteps)
    
    def makeDead(self):                                 #kills the object
        self.deadStep = globalSteps
        deadObjList.append(self)
        objList.remove(self)
            
    def collideObjects(self, self2):                    #combines the combining and killing of objects
        self.combineObjects(self2)   
        self.makeDead()
        self2.makeDead()

for obj in xrange(numOfObjects):                        #this creates all objects
    m = randint(lowMass, upMass)
    p1 = randint(lowPos, upPos)
    p2 = randint(lowPos, upPos)
    obj = InteractiveObject(mass = m, velocity = [0,0], pos1 = p1, pos2 = p2, initStep = 0)
    
while numOfSteps > 0:                                   #not sure why I made this a while loop instead of a for loop but it doesn't really matter
    numOfObjects = len(objList)                         #calculating this for the rest of the while loop up until the collision detection at the end
    globalSteps += 1
    print globalSteps
    
    for obj in objList:
        obj.calcDistances()
        obj.calcAngles()

    for obj in objList:
        obj.calcNetForce()
        obj.calcAccel()
        obj.calcNextPos()
            
    goneThroughList = False                         #this variable is just something I used to tell if I had tested all objects for any collisions
    while goneThroughList == False:
        for obj1 in objList:
            for obj2 in objList:
                x = obj2.lastPos()[0] - obj1.lastPos()[0]
                y = obj2.lastPos()[1] - obj1.lastPos()[1]
                if obj1 == obj2 and obj2.asIndex() == numOfObjects - 1:     #if we've gotten to the very last object
                    goneThroughList = True
                    break
                elif obj1 == obj2:                                          #else if an object is about to be compared with itself (which we don't want)
                    continue
                elif abs(x**2 + y**2) < tol:            #this just collides the objects if they're too close.
                    obj1.collideObjects(obj2)   
                    numOfObjects = len(objList)
                    break
                
    numOfSteps -= 1
                
fig = plt.figure()
ax = fig.add_subplot(111,projection='3d')

for obj in objList:
    positions_y = []
    positions_z = []
    iStep = obj.initStep
    for iter1 in xrange(len(obj.positions)):
        print 'iter1 =',iter1
        positions_y.append(obj.positions[iter1][0]) 
        positions_z.append(obj.positions[iter1][1])
    t = timeArray[iStep:] 
    fig.plot_wireframe(t,positions_y,positions_z)
    
for obj in deadObjList:
    positions_y = []
    positions_z = []
    iStep = obj.initStep
    dStep = obj.deadStep + 1
    for iter1 in enumerate(obj.positions):
        positions_y.append(obj.positions[iter1][0]) 
        positions_z.append(obj.positions[iter1][1])
    t = timeArray[iStep:dStep] 
    fig.plot_wireframe(t,positions_y,positions_z)
    
plt.show()
